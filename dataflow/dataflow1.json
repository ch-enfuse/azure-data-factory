{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "netflix_data",
						"type": "DatasetReference"
					},
					"name": "netflixInOutputStream"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "netflix_data_output",
						"type": "DatasetReference"
					},
					"name": "netlixSinkOutput"
				}
			],
			"transformations": [
				{
					"name": "selectColumns"
				},
				{
					"name": "AggregateAction"
				},
				{
					"name": "sortRank"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "OverallRanked"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Rating as integer (0)",
				"}",
				"source(output(",
				"          {As of} as string,",
				"          Rank as integer,",
				"          {Year to Date Rank} as string,",
				"          {Last Week Rank} as string,",
				"          Title as string,",
				"          Type as string,",
				"          {Netflix Exclusive} as string,",
				"          {Netflix Release Date} as string,",
				"          {Days In Top 10} as string,",
				"          {Viewership Score} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> netflixInOutputStream",
				"netflixInOutputStream select(mapColumn(",
				"          Rank,",
				"          Title",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"selectColumns aggregate(groupBy(Title),",
				"     TimesRanked = countIf(Rank>0 && Rank<11),",
				"          AvgRanked = avg(toInteger(Rank)),",
				"          Rank1 = countIf(Rank==1),",
				"          Rank2 = countIf(Rank==2),",
				"          Rank3 = countIf(Rank==3),",
				"          Rank4 = countIf(Rank==4),",
				"          Rank5 = countIf(Rank==5),",
				"          Rank6 = countIf(Rank==6),",
				"          Rank7 = countIf(Rank==7),",
				"          Rank8 = countIf(Rank==8),",
				"          Rank9 = countIf(Rank==9),",
				"          Rank10 = countIf(Rank==10)) ~> AggregateAction",
				"OverallRanked sort(desc(OverallRanking, true)) ~> sortRank",
				"sortRank keyGenerate(output(overallRank as long),",
				"     startAt: 1L,",
				"     stepValue: 1L,",
				"     partitionBy('hash', 1)) ~> surrogateKey1",
				"AggregateAction derive(OverallRanking = (multiply(Rank1,5)+ multiply(Rank2, 4) + multiply(Rank3, 3) + multiply(Rank4, 2) + multiply(Rank5, 1))/TimesRanked) ~> OverallRanked",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Title,",
				"          TimesRanked,",
				"          AvgRanked,",
				"          Rank1,",
				"          Rank2,",
				"          Rank3,",
				"          Rank4,",
				"          Rank5,",
				"          OverallRanking,",
				"          overallRank",
				"     )) ~> netlixSinkOutput"
			]
		}
	}
}